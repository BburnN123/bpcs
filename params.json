{
  "name": "Steganography (BPCS)",
  "tagline": "Embedding hidden messages inside images.",
  "body": "## BPCS Steganography\r\n\r\nSource: [pdf](http://web.eece.maine.edu/~eason/steg/SPIE98.pdf)\r\n\r\nThe goal of steganography is to hide a message in plain sight. Here, we embed a message in an image by replacing all \"complex\" blocks of pixels in the image with portions of our message. It turns out that portions of the image with high complexity can be entirely removed (or in this case, replaced with our message) without changing the appearance of the image at all. Because most blocks of pixels are complex (i.e., with complexity above some threshold, alpha), we can usually replace around 45% of an image with a hidden message. Below, the 300x300 image on the bottom contains the text of an entire novel, while still looking virtually identical to the vessel image on the top.\r\n\r\n![vessel](https://cloud.githubusercontent.com/assets/1677179/14302935/10adb242-fb74-11e5-9cc7-e5a213760876.png)\r\n![out](https://cloud.githubusercontent.com/assets/1677179/14302974/712fdfc8-fb74-11e5-89fe-a11a2116f055.png)\r\n\r\nNote that with BPCS, the hidden message doesn't have to be text. It can be any file type, including another image.\r\n\r\nYou could upload a profile photo to a website that contains a secret image. Or you could embed an image of a turtle inside an image of a turtle inside an image...turtles all the way down.\r\n\r\n### Encoding and decoding\r\n\r\nFirst, we want to embed a file in a vessel image. Here, we'll embed the text of an entire novel in a 300x300 image.\r\n\r\n`$ python bpcs.py encode -i examples/vessel.png -m examples/message.txt -o examples/encoded.png`\r\n\r\nNow, given the encoded image, we want to recover the message hidden inside it.\r\n\r\n`$ python bpcs.py decode -i examples/encoded.png -a 0.45 -o examples/message_decoded.txt`\r\n\r\nThe output, message_decoded.txt, should be the same as message.txt, which means we have recovered our original message.\r\n\r\n### Checking a vessel image's message capacity\r\n\r\nGiven a vessel image file and an alpha value, we can assess the maximum size message that we could encode.\r\n\r\n`$ python bpcs.py capacity -i examples/vessel.png -a 0.45`\r\n\r\nThe vessel image in the examples folder is 158 KB, and can store a hidden message of up to around 66 KB.\r\n\r\n### Customization\r\n\r\nThe goal of steganography is to hide things in plain sight. For this reason, BPCS doesn't use a secret key or password for encoding and decoding. However, aside from varying the alpha parameter, one way to customize the BPCS procedure is by adding custom encryption and decryption to the message before and after using BPCS.\r\n\r\n### Run as a module\r\n\r\n__Installation__: `pip install bpcs`\r\n\r\n```python\r\nimport bpcs\r\n\r\nalpha = 0.45\r\nvslfile = 'examples/vessel.png'\r\nmsgfile = 'examples/message.txt' # can be any type of file\r\nencfile = 'examples/encoded.png'\r\nmsgfile_decoded = 'tmp.txt'\r\n\r\nbpcs.capacity(vslfile, alpha) # check max size of message you can embed in vslfile\r\nbpcs.encode(vslfile, msgfile, encfile, alpha) # embed msgfile in vslfile, write to encfile\r\nbpcs.decode(encfile, msgfile_decoded, alpha) # recover message from encfile\r\n```\r\n\r\n### Running tests\r\n\r\n`$ python bpcs.py test`\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}